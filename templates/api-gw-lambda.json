{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Creates a new resource for an existing API gateway",

    "Parameters": {
        "APIName": {
            "Description": "Name of the API resource to create",
            "Type": "String",
            "AllowedPattern": "[A-Za-z0-9\\-]*",
            "MinLength": "3",
            "MaxLength": "2048",
            "ConstraintDescription": "must contain only alphanumeric characters (at least four)"
        },
        "APIPath": {
            "Description": "URL path for the new API resource",
            "Type": "String",
            "Default": "api",
            "AllowedPattern": "[A-Za-z0-9\\-]*",
            "MinLength": "1",
            "MaxLength": "64",
            "ConstraintDescription": "must contain only alphanumeric characters (1-64 chars)"
        },
        "LambdaCodeBucket": {
            "Description": "Name of the S3 bucket that's storing the Lamba function's zip file",
            "Type": "String"
        },
        "LambdaCodePath": {
            "Description": "Path to the zip file of code for the Lambda function",
            "Type": "String"
        }
    },

    "Resources": {
        "LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": { "Ref": "LambdaCodeBucket" },
                    "S3Key": { "Ref": "LambdaCodePath" }
                },
                "FunctionName": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, { "Ref": "APIName" } ] ] },
                "Handler": "index.handler",
                "MemorySize": "128",
                "Role": { "Fn::GetAtt": [ "LambdaExecutionRole", "Arn" ] },
                "Runtime": "nodejs4.3",
                "Timeout": "3"
            }
        },
        "LambdaInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": { "Fn::GetAtt": [ "LambdaFunction", "Arn" ] },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com"
            }
        },

        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [ "lambda.amazonaws.com" ]
                            },
                            "Action": [ "sts:AssumeRole" ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "UseDBPolicy" ] ] },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lambda:*"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },

        "APIResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": { "Fn::ImportValue" : "ApiGwAPIMain" },
                "ParentId": { "Fn::ImportValue" : "ApiGwAPIMainParentId" },
                "PathPart": { "Ref": "APIPath" }
            }
        },
        "APIResourceProxy": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": { "Fn::ImportValue" : "ApiGwAPIMain" },
                "ParentId": { "Ref": "APIResource" },
                "PathPart": "{proxy+}"
            }
        },
        "APIMethodANY": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": { "Fn::ImportValue" : "ApiGwAPIMain" },
                "ResourceId": { "Ref": "APIResourceProxy" },
                "HttpMethod": "ANY",
                "AuthorizationType": "NONE",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [":", [
                            "arn:aws:apigateway",
                            { "Ref": "AWS::Region" },
                            { "Fn::Join": [ "/", [
                                "lambda:path/2015-03-31/functions",
                                { "Fn::GetAtt": [ "LambdaFunction", "Arn" ] }, "invocations"
                            ]]}
                        ]]
                    },
                    "IntegrationHttpMethod": "POST",
                    "IntegrationResponses": [{
                        "ResponseTemplates": {},
                        "ResponseParameters": {},
                        "StatusCode": 200
                    }],
                    "PassthroughBehavior": "WHEN_NO_MATCH",
                    "RequestTemplates": {}
                },
                "RequestParameters": {
                    "method.request.querystring.limit": false,
                    "method.request.querystring.next": false
                },
                "MethodResponses": [{
                    "ResponseModels": {},
                    "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": true,
                    },
                    "StatusCode": 200
                }]
            }
        }

    }
}